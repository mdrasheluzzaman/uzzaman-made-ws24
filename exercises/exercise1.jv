pipeline AirPipeline {
  AirExtractor
    -> AirTextFileInterpreter  
    -> AirCsvFileInterpreter  
    -> AirTableInterpreter  
    -> AirDataLoader;



  // 6. Below the pipes, we usually define the blocks 
  // that are connected by the pipes.

  // 7. Blocks instantiate a block type by using the oftype keyword.
  // The block type defines the available properties that the block
  // can use to specify the intended behavior of the block 
  block AirExtractor oftype HttpExtractor {

    // 8. Properties are assigned to concrete values.
    // Here, we specify the URL where the file shall be downloaded from.
    url: "https://opendata.rhein-kreis-neuss.de/api/explore/v2.1/catalog/datasets/rhein-kreis-neuss-flughafen-weltweit/exports/csv?lang=en&timezone=Europe%2FBerlin&use_labels=true&delimiter=%3B";
  }

  // 9. The HttpExtractor requires no input and produces a binary file as output.
  // This file has to be interpreted, e.g., as text file.
  block AirTextFileInterpreter oftype TextFileInterpreter { }

  // 10. Next, we interpret the text file as sheet.
  // A sheet only contains text cells and is useful for manipulating the shape of data before assigning more strict value types to cells.
  block AirCsvFileInterpreter oftype CSVInterpreter {
    delimiter: ";";
  }

  // 14. As a next step, we interpret the sheet as a table by adding structure.
  // We define a value type per column that specifies the data type of the column.
  // Rows that include values that are not valid according to the their value types are dropped automatically. 
  block AirTableInterpreter oftype TableInterpreter {
    header: true;
    columns: [
      "Lfd. Nummer" oftype integer,
      "Name des Flughafens" oftype text,
      "Ort" oftype text,
      "Land" oftype text,
      "IATA" oftype text,
      "ICAO" oftype text,
      "Latitude" oftype decimal,
      "Longitude" oftype decimal,
      "Altitude" oftype integer
      
    ];
  }

  // 15. As a last step, we load the table into a sink,
  // here into a sqlite file.
  // The structural information of the table is used
  // to generate the correct table.
  block AirDataLoader oftype SQLiteLoader {
    table: "airports";
    file: "./airports.sqlite";
  }

  // 16. Congratulations!
  // You can now use the sink for your data analysis, app, 
  // or whatever you want to do with the cleaned data.  
}